# definition needed for building SFML
# but must be disabled for all importing libraries
cxx.poptions += -DSFML_SYSTEM_EXPORTS

# Public headers.
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

is_windows = ($config.libsfml_system.platform == 'windows')
is_android = ($config.libsfml_system.platform == 'android')
is_unix = ($config.libsfml_system.platform == 'linux' || \
          $config.libsfml_system.platform == 'macos' || \
          $config.libsfml_system.platform == 'freebsd' || \
          $config.libsfml_system.platform == 'openbsd' || \
          $config.libsfml_system.platform == 'android' || \
          $config.libsfml_system.platform == 'ios')

lib{sfml-system}: $pub/{$pub_hdrs}
lib{sfml-system}: SFML/System/{hxx cxx}{*}
lib{sfml-system}: SFML/System/Win32/{hxx cxx}{*}: include = $is_windows
lib{sfml-system}: SFML/System/Unix/{hxx cxx}{*}: include = $is_unix
lib{sfml-system}: SFML/System/Android/{hxx cxx}{*}: include = $is_android

platform_libs = # Platform specific libraries.
platform_poptions = # Platform specific poptions.
switch $config.libsfml_system.platform
{
    case 'windows'
    {
        if ($cxx.target.system == 'mingw32')
            platform_libs += -lwinmm
        else
            platform_libs += winmm.lib
    }
    case 'linux'
    {
        platform_libs = -pthread -lrt
    }
    case 'macos'
    case 'openbsd'
    {
        platform_libs = -pthread
    }
    case 'android'
    {
        platform_libs = -landroid -llog
    }
}

# Build options.
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

cxx.poptions += "-I$out_pfx_src" "-I$src_pfx_src" \
                "-I$out_pfx_inc" "-I$src_pfx_inc" \
                $platform_poptions
cxx.libs += $platform_libs

{hbmia obja}{*}: cxx.poptions += -DSFML_STATIC

# Export options.
lib{sfml-system}:
{
  cxx.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
}

liba{sfml-system}: cxx.export.poptions += -DSFML_STATIC

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
if $version.pre_release
  lib{sfml-system}: bin.lib.version = "-$version.project_id"
else
  lib{sfml-system}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
{hxx ixx}{*}: install = false
